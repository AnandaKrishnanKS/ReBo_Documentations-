{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"BMAPS/","title":"BMAPS_Services","text":""},{"location":"BMAPS/#description","title":"Description","text":"<p>This repository acts as an index for all services and modules in the BMAPS project. There are 12 services in total along with the authenticator application: 1. Automatic Stock Replenishment 2. Strategic Plan 3. Range Architecture 4. Option to Buy 5. Assortment Plan\u200b 6. Budget Planning 7. Merchandise Financial Plan\u200b 8. Sales Forecasting\u200b 9. Margin Forecasting 10. WSSI/MSSI 11. Store Grading 12. Option Planning</p> <ul> <li>Web Application</li> <li>Backend API</li> </ul>"},{"location":"BMAPS/#tech-stack","title":"Tech Stack","text":"<ul> <li>Web Application is built with NextJS</li> <li>API is built with FastAPI</li> </ul>"},{"location":"BMAPS/#programming-languages","title":"Programming Languages","text":""},{"location":"BMAPS/#frameworks","title":"Frameworks","text":""},{"location":"BMAPS/#ui-kits","title":"UI Kits","text":""},{"location":"BMAPS/#tools","title":"Tools","text":""},{"location":"BMAPS/#operating-system","title":"Operating System","text":""},{"location":"BMAPS/#database","title":"Database","text":""},{"location":"BMAPS/#bmaps-api","title":"BMAPS API","text":"<p>BMAPS API is developed with FastAPI in a monolithic architecture. Every service communicates with the API and authenticates via token generated via Authentication app.</p>"},{"location":"BMAPS/#build-instructions","title":"Build Instructions","text":""},{"location":"BMAPS/#all-in-one-server","title":"All in one server","text":"<p>If you want to deploy the entire project in a single server then you may follow the steps below: 1. Clone the repository</p> <pre><code>  git clone --recurse-submodules -j8 https://github.com/Electric-Grasshopper/BMAPS_Services\n</code></pre> <ol> <li>Build and Start the Services (note: docker-compose file is being written)</li> </ol> <pre><code>  docker-compose up --build\n</code></pre> <ol> <li>Stop the services</li> </ol> <pre><code>  docker-compose down\n</code></pre>"},{"location":"BMAPS/#separate-services","title":"Separate services","text":"<p>If you want to run each service in separate server then you may follow the build instructions in the service repository</p>"},{"location":"authentication/","title":"Authentication","text":""},{"location":"authentication/#overview","title":"Overview","text":"<p>Authentication service is used to authenticate the the user and provide access to the services which they can use.</p>"},{"location":"authentication/#api-calls","title":"API Calls","text":""},{"location":"authentication/#interface","title":"Interface","text":"<pre><code>// Define interface for type safety\ninterface LoginPayload {\n    username: string;\n    password: string;\n}\n\ninterface LoginResponse {\n    message: string;\n    access_token: string;\n    refresh_token: string;\n}\n</code></pre>"},{"location":"authentication/#actual-api-calls","title":"Actual API Calls","text":"<pre><code>export const login = async (payload: LoginPayload): Promise&lt;LoginResponse&gt; =&gt; {\n    try {\n        const response = await axios.post&lt;LoginResponse&gt;(\n            ENDPOINTS.LOGIN, \n            payload,\n            { headers: DEFAULT_HEADERS }\n        );\n\n        // Store tokens in session storage\n        sessionStorage.setItem('access_token', response.data.access_token);\n        sessionStorage.setItem('refresh_token', response.data.refresh_token);\n\n        return response.data;\n    } catch (error) {\n        if (axios.isAxiosError(error)) {\n            const axiosError = error as AxiosError&lt;ErrorResponse&gt;;\n\n            if (axiosError.response) {\n                throw new Error(axiosError.response.data.message || axiosError.response.data.detail || 'Error logging in');\n            } else if (axiosError.request) {\n                throw new Error('No response received from server. Please try again.');\n            }\n        }\n        // Handle generic error\n        throw new Error('Error fetching user details.');\n    }\n};\n</code></pre>"},{"location":"authentication/#login-page-ui","title":"Login Page UI","text":"Syntax Description Header Title Paragraph Text <pre><code>This is a small demonstration .pdf file -\n</code></pre> <pre><code>just for use in the Virtual Mechanics tutorials. More text. And more\ntext. And more text. And more text. And more text.\n</code></pre> <pre><code>And more text. And more text. And more text. And more text. And more\ntext. And more text. Boring, zzzzz. And more text. And more text. And\nmore text. And more text. And more text. And more text. And more text.\nAnd more text. And more text.\n</code></pre> <pre><code>And more text. And more text. And more text. And more text. And more\ntext. And more text. And more text. Even more. Continued on page 2 ...\n</code></pre>"},{"location":"authentication/#simple-pdf-file-2","title":"Simple PDF File 2","text":"<pre><code>...continued from page 1. Yet more text. And more text. And more text.\nAnd more text. And more text. And more text. And more text. And more\ntext. Oh, how boring typing this stuff. But not as boring as watching\npaint dry. And more text. And more text. And more text. And more text.\nBoring. More, a little more text. The end, and just as well.\n</code></pre>"}]}